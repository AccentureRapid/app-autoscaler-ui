// This file was generated by counterfeiter
package fakes

import (
	"net/http"
	"scalerui/models"
	"scalerui/session"
	"sync"
)

type FakeSessionManager struct {
	GetTokensStub        func(r *http.Request) *models.Tokens
	getTokensMutex       sync.RWMutex
	getTokensArgsForCall []struct {
		r *http.Request
	}
	getTokensReturns struct {
		result1 *models.Tokens
	}
	SetTokensStub        func(w http.ResponseWriter, r *http.Request, tokens *models.Tokens)
	setTokensMutex       sync.RWMutex
	setTokensArgsForCall []struct {
		w      http.ResponseWriter
		r      *http.Request
		tokens *models.Tokens
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSessionManager) GetTokens(r *http.Request) *models.Tokens {
	fake.getTokensMutex.Lock()
	fake.getTokensArgsForCall = append(fake.getTokensArgsForCall, struct {
		r *http.Request
	}{r})
	fake.recordInvocation("GetTokens", []interface{}{r})
	fake.getTokensMutex.Unlock()
	if fake.GetTokensStub != nil {
		return fake.GetTokensStub(r)
	}
	return fake.getTokensReturns.result1
}

func (fake *FakeSessionManager) GetTokensCallCount() int {
	fake.getTokensMutex.RLock()
	defer fake.getTokensMutex.RUnlock()
	return len(fake.getTokensArgsForCall)
}

func (fake *FakeSessionManager) GetTokensArgsForCall(i int) *http.Request {
	fake.getTokensMutex.RLock()
	defer fake.getTokensMutex.RUnlock()
	return fake.getTokensArgsForCall[i].r
}

func (fake *FakeSessionManager) GetTokensReturns(result1 *models.Tokens) {
	fake.GetTokensStub = nil
	fake.getTokensReturns = struct {
		result1 *models.Tokens
	}{result1}
}

func (fake *FakeSessionManager) SetTokens(w http.ResponseWriter, r *http.Request, tokens *models.Tokens) {
	fake.setTokensMutex.Lock()
	fake.setTokensArgsForCall = append(fake.setTokensArgsForCall, struct {
		w      http.ResponseWriter
		r      *http.Request
		tokens *models.Tokens
	}{w, r, tokens})
	fake.recordInvocation("SetTokens", []interface{}{w, r, tokens})
	fake.setTokensMutex.Unlock()
	if fake.SetTokensStub != nil {
		fake.SetTokensStub(w, r, tokens)
	}
}

func (fake *FakeSessionManager) SetTokensCallCount() int {
	fake.setTokensMutex.RLock()
	defer fake.setTokensMutex.RUnlock()
	return len(fake.setTokensArgsForCall)
}

func (fake *FakeSessionManager) SetTokensArgsForCall(i int) (http.ResponseWriter, *http.Request, *models.Tokens) {
	fake.setTokensMutex.RLock()
	defer fake.setTokensMutex.RUnlock()
	return fake.setTokensArgsForCall[i].w, fake.setTokensArgsForCall[i].r, fake.setTokensArgsForCall[i].tokens
}

func (fake *FakeSessionManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getTokensMutex.RLock()
	defer fake.getTokensMutex.RUnlock()
	fake.setTokensMutex.RLock()
	defer fake.setTokensMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeSessionManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ session.SessionManager = new(FakeSessionManager)
